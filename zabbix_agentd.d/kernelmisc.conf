# [This file is part of the zabbix-agent-osso package]
# Misc. kernel info: cpu cores, kernel entropy, iptables/firewall.
#
# Check available random entropy.
UserParameter=kernel.entropy, cat /proc/sys/kernel/random/entropy_avail
# Do we have external IPv4/IPv6 (in which case, we need a firewall as well).
UserParameter=net.has_ext_ip4, ip addr | awk '/^ *inet /{if($2!~/^127\.|10\.|192\.168\.|172\.(1[6-9]|2[0-9]|3[01])\./){ip4=1;exit}} END{print ip4==1}'
UserParameter=net.has_ext_ip6, ip addr | awk '/^ *inet6 /{n=substr($2,1,4);if(n!="::1/"&&n!="fe80"){ip6=1;exit}} END{print ip6==1}'
# Overall networking stats TCP Retransmits.
UserParameter=net.tcpretranssegs, awk '/^Tcp:/{for(i=1;i<=NF;++i){if(!n){map[$i]=i}else{val[i]=$i;}}++n} END{print val[map["RetransSegs"]]}' /proc/net/snmp
UserParameter=net.tcpsynretrans, awk '/^TcpExt:/{for(i=1;i<=NF;++i){if(!n){map[$i]=i}else{val[i]=$i;}}++n} END{print val[map["TCPSynRetrans"]]}' /proc/net/netstat
# Check iptables policy/rules in default chains: 'INPUT' | 'OUTPUT' | 'FORWARD'
# (If no iptables then pretend the firewall has an INPUT chain and ACCEPTs all.)
# (That allows the net.has_ext_ip4 trigger to trigger on a missing firewall.)
UserParameter=net.iptables.discover_chains, (test -x /sbin/iptables && sudo iptables -S || echo '-P INPUT ACCEPT') | awk 'BEGIN{printf "["} /^-P /{if(n)printf ",";n=1;printf "{\"{#CHAIN}\":\"" $2 "\"}"} END{print "]"}'
UserParameter=net.iptables.policy[*], (test -x /sbin/iptables && sudo iptables -S '$1' || echo '-P $1 ACCEPT') | awk '/^-P /{if($''3=="ACCEPT")print 0;else if($''3=="DROP")print 1;else if($''3=="REJECT")print 2;else print 3}'
UserParameter=net.iptables.rules[*], (test -x /sbin/iptables && sudo iptables -S '$1' || echo '-P $1 ACCEPT') | awk 'BEGIN{i=0} /^-A /{i+=1} END{print i}'
UserParameter=net.ip6tables.discover_chains, (test -x /sbin/ip6tables && sudo ip6tables -S || echo '-P INPUT ACCEPT') | awk 'BEGIN{printf "["} /^-P /{if(n)printf ",";n=1;printf "{\"{#CHAIN}\":\"" $2 "\"}"} END{print "]"}'
UserParameter=net.ip6tables.policy[*], (test -x /sbin/ip6tables && sudo ip6tables -S '$1' || echo '-P $1 ACCEPT') | awk '/^-P /{if($''3=="ACCEPT")print 0;else if($''3=="DROP")print 1;else if($''3=="REJECT")print 2;else print 3}'
UserParameter=net.ip6tables.rules[*], (test -x /sbin/ip6tables && sudo ip6tables -S '$1' || echo '-P $1 ACCEPT') | awk 'BEGIN{i=0} /^-A /{i+=1} END{print i}'
# CPU cores.
UserParameter=system.cpu.discover_cores, awk 'BEGIN{printf "["} /^processor\s+:/{if($3!="0")printf ",";printf "{\"{#CORE}\":\"" $3 "\"}"} END{print "]"}' /proc/cpuinfo
UserParameter=system.cpu.cores, awk 'BEGIN{n=0} /^processor\s+:/{n+=1} END{print n}' /proc/cpuinfo
# DMI info. (system.hw.chassis[<info>] exists, but this requires zabbix
# to run as root.)
UserParameter=system.dmi.bios, echo "$(cat /sys/class/dmi/id/bios_vendor 2>/dev/null) [$(cat /sys/class/dmi/id/bios_version 2>/dev/null)]"
UserParameter=system.dmi.chassis, echo "$(cat /sys/class/dmi/id/chassis_vendor 2>/dev/null) [$(cat /sys/class/dmi/id/chassis_version 2>/dev/null)$(grep -q '^lxcfs /proc/' /proc/mounts && echo ', lxcfs-in-proc')]"
UserParameter=system.dmi.product, echo "$(cat /sys/class/dmi/id/product_name 2>/dev/null) [$(cat /sys/class/dmi/id/product_version 2>/dev/null)]"
