# [This file is part of the zabbix-agent-osso package]
k8s-patroni
===========

The k8s patroni monitoring works by running a script as a sidecar, or in cron.
This script writes all statuses available in the container to a configmap.
These configmaps are automatically discovered by the zabbix-agent.

To use the patroni monitoring you have to do the following steps:

1. Label the namespaces to be monitored with
   `ossobv/zabbix-agent-osso.k8s-patroni=true`.

2. Create an Ubuntu sidecar in all patroni pods to be monitored, or add the script to cron.

* if you use the script in a cron we advise using run-one and timeout:
```
 * * * * * postgres run-one timeout 1m envdir /tmp/scripts/postgres-status.sh
```

3. Give this sidecar a serviceaccount to create configmaps.

   - You have to manually create the configmaps the first time;
      kubectl create cm status-<status_name> --from-literal status=null
   - the serviceaccount needs only patch permissions, and can be limited
     to only the monitored namespaces.

4. Mount the script (below) to the sidecar, and make it run every 30 seconds.

5. Load the template and enable the template for the hosts:

   - The hosts should have kubectl and access to the cluster and namespaces.

* for the wal-g env variables in cron you can use a mounted secret/conifgmap at /etc/wal-g.d/env, here you also define POD_NAMESPACE and STATUS_NAME.
* patroni is accessed trough localhost because the cli needs multiple env variables we dont want to define in an extra configmap. ( it is a rest api anyways)

Script:
```
    #!/bin/bash
    umask 0077
    ROLE=$(curl -s http://localhost:8008 | jq -r .role)
    # there is only one master, use this to prevent double status checks.
    if test $ROLE == "master"; then
      CA_CERT="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt";
      sed -e 's/^/Authorization: Bearer /' /var/run/secrets/kubernetes.io/serviceaccount/token >/tmp/auth
      CLUSTER_STATUS=$(curl localhost:8008/cluster)
      curl localhost:8008/config > /tmp/patroni-config.json
      PATRONI_ARCHIVE_ENABLED="$(jq -r '.postgresql.parameters.archive_mode == "on"' /tmp/patroni-config.json)"
      PATRONI_ARCHIVE_COMMAND_SET="$(jq -r '.postgresql.parameters.archive_command != null' /tmp/patroni-config.json)"

      WALG_LAST_BACKUP="$(envdir /etc/wal-g.d/env wal-g backup-list --json 2> /dev/null | jq '.[-1] // {}' -c)"
      WALG_TIMELINE="$(envdir /etc/wal-g.d/env wal-g wal-verify timeline --json 2>/dev/null)"
      WALG_INTEGRITY="$(envdir /etc/wal-g.d/env wal-g wal-verify integrity --json 2>/dev/null)"

      REQUEST_JSON="$(echo "{\"cluster_status\": ${CLUSTER_STATUS}, \"patroni_archive_enabled\": ${PATRONI_ARCHIVE_ENABLED}, \"patroni_archive_command_set\": ${PATRONI_ARCHIVE_COMMAND_SET}, \"walg_last_backup\": ${WALG_LAST_BACKUP}, \"walg_timeline\": ${WALG_TIMELINE}, \"walg_integrity\": ${WALG_INTEGRITY}}" | jq -c .)"

      PAYLOAD="[{\"op\" : \"replace\", \"path\" : \"/data/status\", \"value\" : \"${REQUEST_JSON//\"/\\\"}\" }]"
      curl --cacert ${CA_CERT} --header @/tmp/auth --header "Content-Type: application/json-patch+json" --request PATCH --data "${PAYLOAD}" \
      https://kubernetes.default.svc:443/api/v1/namespaces/${POD_NAMESPACE}/configmaps/status-${STATUS_NAME}

      echo "status updated"
    else
      echo "Not eligable, I am replica"
    fi
```
