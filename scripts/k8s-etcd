#!/bin/sh
# [This file is part of the zabbix-agent-osso package]
# REQUIRES: kubectl, jq
#

get_contexts() {
    kubectl config get-contexts -oname
}

get_namespaces() {
    kubectl get namespace -l ossobv/zabbix-agent-osso.k8s-etcd=true \
            --context "$1" -oname 2>/dev/null |
        sed -e 's/namespace\///'
}

if [ "$1" = "--discover" ]; then
    for context in $(get_contexts); do
        for namespace in $(get_namespaces "$context"); do
            status_name=$(kubectl --context $context get namespace $namespace \
                -ojsonpath='{.metadata.labels}' |
                jq -r '."ossobv/zabbix-agent-osso.k8s-etcd-status-name"')
            endpoints=$(kubectl --context $context  -n $namespace get cm \ 
                $status_name -ojsonpath='{.data.status}' |
                jq -r '.etcd_health[]|.endpoint')
            for endpoint in $endpoints; do
                echo '{'"{#CONTEXT}":"'$context'",' \
                    '"{#NAMESPACE}":"'$namespace'",' \
                    '"{#STATUS_NAME}":"'$status_name'",' \
                    '"{#ENDPOINT}":"'$endpoint'"'}'
            done
        done
    done | jq -sc
    exit 0

elif [ "$1" = "--get-status-json" ]; then
    kubectl --context $2  -n $3 get cm $4 -ojsonpath='{.data.status}' |
      jq '.etcd_status[] | select(.Endpoint ==  "'"$5"'")'
    exit 0

elif [ "$1" = "--get-health-json" ]; then
    kubectl --context $2  -n $3 get cm $4 -ojsonpath='{.data.status}' |
      jq '.etcd_health[] | select(.endpoint ==  "'"$5"'")'
    exit 0

else
    echo "possible options:
    --discover
    --get-status-json context namespace statusname endpoint
    --get-health-json context namespace statusname endpoint" >&2
    exit 1
fi
