#!/bin/sh
# [This file is part of the zabbix-agent-osso package]
# REQUIRES: kubectl
#
#UserParameter=k8s-patroni.discovery, sudo /etc/zabbix/scripts/k8s-patroni --discover
#UserParameter=k8s-patroni.values[*], sudo /etc/zabbix/scripts/k8s-patroni "$1" "$2" "$3" "$4"
#

get_contexts() {
    kubectl config get-contexts -oname
}

get_namespaces() {
    kubectl --context "$1" get namespace \
            -l ossobv/zabbix-agent-osso.k8s-patroni=true \
            --no-headers 2>/dev/null |
        sed -e 's/namespace\///'
}

get_configmaps() {
    kubectl --context "$1" -n "$2" get cm -o name |
        sed -e 's/^configmap\///;/^status-/!d'
}

make_json() {
    kubectl --context "$1" -n "$2" get cm "$3" \
            -o jsonpath='{.data.status}' |
        jq -r '.members[] | {"{#CONTEXT}":"'$1'","{#NAMESPACE}":"'$2'",'"\
"'"{#POD}":"'$3'","{#MEMBER}":.name}'
}

if [ "$1" = "--discover" ]; then
    for context in $(get_contexts); do
        for namespace in $(get_namespaces "$context"); do
            for name in $(get_configmaps "$context" "$namespace"); do
                make_json "$context" "$namespace" "${name#status-}"
            done
        done
    done | jq -sc
    exit 0
fi

exec kubectl --context "$1" -n "$2" get cm "status-$3" \
    -o jsonpath='{.data.status}' | jq '.members[] | select(.name == "'"$4"'")'
