#!/bin/sh
# [This file is part of the zabbix-agent-osso package]
# REQUIRES: kubectl
#
#UserParameter=k8s-patroni.discovery, sudo /etc/zabbix/scripts/k8s-patroni --discover
#UserParameter=k8s-patroni.values[*], sudo /etc/zabbix/scripts/k8s-patroni "$1" "$2" "$3" "$4"
#

get_contexts() {
    kubectl config get-contexts -oname
}

get_namespaces() {
    kubectl get namespace -l patroni-postgres-monitoring=true \
        --context $1 --no-headers 2>/dev/null \
    | sed -e 's/namespace\///' 
}

get_configmaps() {
    kubectl -n $1 --context $2 get cm -o name \
    | sed -e 's/^configmap\///;/^citus-/!d'
}

make_json() {
    kubectl -n $namespace --context $context get cm $name \
        -o jsonpath='{.data.status}' \
    | jq -r '.members[] | {"{#CONTEXT}":"'$context'","{#NAMESPACE}":"'$namespace'","{#CONFIGMAP}":"'$name'","{#MEMBER}":.name}'; 
}

if [ "$1" = "--discover" ]; then
    for context in $(get_contexts); do 
        for namespace in $(get_namespaces "$context"); do
            for name in $(get_configmaps "$namespace" "$context"); do
                make_json "$namespace" "$context" "$name"
            done
        done
    done | jq -sc
    exit 0
fi

exec kubectl --context "$1" -n "$2" get cm "$3" -o jsonpath='{.data.status}' |
    jq '.members[] | select(.name == "'"$4"'")'
